function AlignmentPattern(t,e,i){this.x=t,this.y=e,this.count=1,this.estimatedModuleSize=i,this.__defineGetter__("EstimatedModuleSize",function(){return this.estimatedModuleSize}),this.__defineGetter__("Count",function(){return this.count}),this.__defineGetter__("X",function(){return Math.floor(this.x)}),this.__defineGetter__("Y",function(){return Math.floor(this.y)}),this.incrementCount=function(){this.count++},this.aboutEquals=function(t,e,i){if(Math.abs(e-this.y)<=t&&Math.abs(i-this.x)<=t){var r=Math.abs(t-this.estimatedModuleSize);return 1>=r||r/this.estimatedModuleSize<=1}return!1}}function AlignmentPatternFinder(t,e,i,r,n,s,h){this.image=t,this.possibleCenters=new Array,this.startX=e,this.startY=i,this.width=r,this.height=n,this.moduleSize=s,this.crossCheckStateCount=new Array(0,0,0),this.resultPointCallback=h,this.centerFromEnd=function(t,e){return e-t[2]-t[1]/2},this.foundPatternCross=function(t){for(var e=this.moduleSize,i=e/2,r=0;3>r;r++)if(Math.abs(e-t[r])>=i)return!1;return!0},this.crossCheckVertical=function(t,e,i,r){var n=this.image,s=qrcode.height,h=this.crossCheckStateCount;h[0]=0,h[1]=0,h[2]=0;for(var o=t;o>=0&&n[e+o*qrcode.width]&&h[1]<=i;)h[1]++,o--;if(0>o||h[1]>i)return NaN;for(;o>=0&&!n[e+o*qrcode.width]&&h[0]<=i;)h[0]++,o--;if(h[0]>i)return NaN;for(o=t+1;s>o&&n[e+o*qrcode.width]&&h[1]<=i;)h[1]++,o++;if(o==s||h[1]>i)return NaN;for(;s>o&&!n[e+o*qrcode.width]&&h[2]<=i;)h[2]++,o++;if(h[2]>i)return NaN;var a=h[0]+h[1]+h[2];return 5*Math.abs(a-r)>=2*r?NaN:this.foundPatternCross(h)?this.centerFromEnd(h,o):NaN},this.handlePossibleCenter=function(t,e,i){var r=t[0]+t[1]+t[2],n=this.centerFromEnd(t,i),s=this.crossCheckVertical(e,Math.floor(n),2*t[1],r);if(!isNaN(s)){for(var h=(t[0]+t[1]+t[2])/3,o=this.possibleCenters.length,a=0;o>a;a++){var u=this.possibleCenters[a];if(u.aboutEquals(h,s,n))return new AlignmentPattern(n,s,h)}var l=new AlignmentPattern(n,s,h);this.possibleCenters.push(l),null!=this.resultPointCallback&&this.resultPointCallback.foundPossibleResultPoint(l)}return null},this.find=function(){for(var e=this.startX,n=this.height,s=e+r,h=i+(n>>1),o=new Array(0,0,0),a=0;n>a;a++){var u=h+(0==(1&a)?a+1>>1:-(a+1>>1));o[0]=0,o[1]=0,o[2]=0;for(var l=e;s>l&&!t[l+qrcode.width*u];)l++;for(var f=0;s>l;){if(t[l+u*qrcode.width])if(1==f)o[f]++;else if(2==f){if(this.foundPatternCross(o)){var d=this.handlePossibleCenter(o,u,l);if(null!=d)return d}o[0]=o[2],o[1]=1,o[2]=0,f=1}else o[++f]++;else 1==f&&f++,o[f]++;l++}if(this.foundPatternCross(o)){var d=this.handlePossibleCenter(o,u,s);if(null!=d)return d}}if(0!=this.possibleCenters.length)return this.possibleCenters[0];throw"Couldn't find enough alignment patterns"}}
function BitMatrix(t,i){if(i||(i=t),1>t||1>i)throw"Both dimensions must be greater than 0";this.width=t,this.height=i;var h=t>>5;0!=(31&t)&&h++,this.rowSize=h,this.bits=new Array(h*i);for(var e=0;e<this.bits.length;e++)this.bits[e]=0;this.__defineGetter__("Width",function(){return this.width}),this.__defineGetter__("Height",function(){return this.height}),this.__defineGetter__("Dimension",function(){if(this.width!=this.height)throw"Can't call getDimension() on a non-square matrix";return this.width}),this.get_Renamed=function(t,i){var h=i*this.rowSize+(t>>5);return 0!=(1&URShift(this.bits[h],31&t))},this.set_Renamed=function(t,i){var h=i*this.rowSize+(t>>5);this.bits[h]|=1<<(31&t)},this.flip=function(t,i){var h=i*this.rowSize+(t>>5);this.bits[h]^=1<<(31&t)},this.clear=function(){for(var t=this.bits.length,i=0;t>i;i++)this.bits[i]=0},this.setRegion=function(t,i,h,e){if(0>i||0>t)throw"Left and top must be nonnegative";if(1>e||1>h)throw"Height and width must be at least 1";var s=t+h,n=i+e;if(n>this.height||s>this.width)throw"The region must fit inside the matrix";for(var r=i;n>r;r++)for(var o=r*this.rowSize,a=t;s>a;a++)this.bits[o+(a>>5)]|=1<<(31&a)}}
function BitMatrixParser(r){var i=r.Dimension;if(21>i||1!=(3&i))throw"Error BitMatrixParser";this.bitMatrix=r,this.parsedVersion=null,this.parsedFormatInfo=null,this.copyBit=function(r,i,t){return this.bitMatrix.get_Renamed(r,i)?t<<1|1:t<<1},this.readFormatInformation=function(){if(null!=this.parsedFormatInfo)return this.parsedFormatInfo;for(var r=0,i=0;6>i;i++)r=this.copyBit(i,8,r);r=this.copyBit(7,8,r),r=this.copyBit(8,8,r),r=this.copyBit(8,7,r);for(var t=5;t>=0;t--)r=this.copyBit(8,t,r);if(this.parsedFormatInfo=FormatInformation.decodeFormatInformation(r),null!=this.parsedFormatInfo)return this.parsedFormatInfo;var o=this.bitMatrix.Dimension;r=0;for(var s=o-8,i=o-1;i>=s;i--)r=this.copyBit(i,8,r);for(var t=o-7;o>t;t++)r=this.copyBit(8,t,r);if(this.parsedFormatInfo=FormatInformation.decodeFormatInformation(r),null!=this.parsedFormatInfo)return this.parsedFormatInfo;throw"Error readFormatInformation"},this.readVersion=function(){if(null!=this.parsedVersion)return this.parsedVersion;var r=this.bitMatrix.Dimension,i=r-17>>2;if(6>=i)return Version.getVersionForNumber(i);for(var t=0,o=r-11,s=5;s>=0;s--)for(var n=r-9;n>=o;n--)t=this.copyBit(n,s,t);if(this.parsedVersion=Version.decodeVersionInformation(t),null!=this.parsedVersion&&this.parsedVersion.DimensionForVersion==r)return this.parsedVersion;t=0;for(var n=5;n>=0;n--)for(var s=r-9;s>=o;s--)t=this.copyBit(n,s,t);if(this.parsedVersion=Version.decodeVersionInformation(t),null!=this.parsedVersion&&this.parsedVersion.DimensionForVersion==r)return this.parsedVersion;throw"Error readVersion"},this.readCodewords=function(){var r=this.readFormatInformation(),i=this.readVersion(),t=DataMask.forReference(r.DataMask),o=this.bitMatrix.Dimension;t.unmaskBitMatrix(this.bitMatrix,o);for(var s=i.buildFunctionPattern(),n=!0,e=new Array(i.TotalCodewords),a=0,d=0,h=0,f=o-1;f>0;f-=2){6==f&&f--;for(var m=0;o>m;m++)for(var p=n?o-1-m:m,u=0;2>u;u++)s.get_Renamed(f-u,p)||(h++,d<<=1,this.bitMatrix.get_Renamed(f-u,p)&&(d|=1),8==h&&(e[a++]=d,h=0,d=0));n^=!0}if(a!=i.TotalCodewords)throw"Error readCodewords";return e}}
function DataBlock(o,r){this.numDataCodewords=o,this.codewords=r,this.__defineGetter__("NumDataCodewords",function(){return this.numDataCodewords}),this.__defineGetter__("Codewords",function(){return this.codewords})}DataBlock.getDataBlocks=function(o,r,e){if(o.length!=r.TotalCodewords)throw"ArgumentException";for(var t=r.getECBlocksForLevel(e),d=0,a=t.getECBlocks(),n=0;n<a.length;n++)d+=a[n].Count;for(var s=new Array(d),c=0,w=0;w<a.length;w++)for(var f=a[w],n=0;n<f.Count;n++){var l=f.DataCodewords,i=t.ECCodewordsPerBlock+l;s[c++]=new DataBlock(l,new Array(i))}for(var h=s[0].codewords.length,C=s.length-1;C>=0;){var u=s[C].codewords.length;if(u==h)break;C--}C++;for(var v=h-t.ECCodewordsPerBlock,g=0,n=0;v>n;n++)for(var w=0;c>w;w++)s[w].codewords[n]=o[g++];for(var w=C;c>w;w++)s[w].codewords[v]=o[g++];for(var k=s[0].codewords.length,n=v;k>n;n++)for(var w=0;c>w;w++){var B=C>w?n:n+1;s[w].codewords[B]=o[g++]}return s};
function QRCodeDataBlockReader(t,i,e){this.blockPointer=0,this.bitPointer=7,this.dataLength=0,this.blocks=t,this.numErrorCorrectionCode=e,9>=i?this.dataLengthMode=0:i>=10&&26>=i?this.dataLengthMode=1:i>=27&&40>=i&&(this.dataLengthMode=2),this.getNextBits=function(t){var i=0;if(t<this.bitPointer+1){for(var e=0,r=0;t>r;r++)e+=1<<r;return e<<=this.bitPointer-t+1,i=(this.blocks[this.blockPointer]&e)>>this.bitPointer-t+1,this.bitPointer-=t,i}if(t<this.bitPointer+1+8){for(var n=0,r=0;r<this.bitPointer+1;r++)n+=1<<r;return i=(this.blocks[this.blockPointer]&n)<<t-(this.bitPointer+1),this.blockPointer++,i+=this.blocks[this.blockPointer]>>8-(t-(this.bitPointer+1)),this.bitPointer=this.bitPointer-t%8,this.bitPointer<0&&(this.bitPointer=8+this.bitPointer),i}if(t<this.bitPointer+1+16){for(var n=0,h=0,r=0;r<this.bitPointer+1;r++)n+=1<<r;var o=(this.blocks[this.blockPointer]&n)<<t-(this.bitPointer+1);this.blockPointer++;var s=this.blocks[this.blockPointer]<<t-(this.bitPointer+1+8);this.blockPointer++;for(var r=0;r<t-(this.bitPointer+1+8);r++)h+=1<<r;h<<=8-(t-(this.bitPointer+1+8));var a=(this.blocks[this.blockPointer]&h)>>8-(t-(this.bitPointer+1+8));return i=o+s+a,this.bitPointer=this.bitPointer-(t-8)%8,this.bitPointer<0&&(this.bitPointer=8+this.bitPointer),i}return 0},this.NextMode=function(){return this.blockPointer>this.blocks.length-this.numErrorCorrectionCode-2?0:this.getNextBits(4)},this.getDataLength=function(t){for(var i=0;;){if(t>>i==1)break;i++}return this.getNextBits(qrcode.sizeOfDataLengthInfo[this.dataLengthMode][i])},this.getRomanAndFigureString=function(t){var i=t,e=0,r="",n=new Array("0","1","2","3","4","5","6","7","8","9","A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z"," ","$","%","*","+","-",".","/",":");do if(i>1){e=this.getNextBits(11);var h=Math.floor(e/45),o=e%45;r+=n[h],r+=n[o],i-=2}else 1==i&&(e=this.getNextBits(6),r+=n[e],i-=1);while(i>0);return r},this.getFigureString=function(t){var i=t,e=0,r="";do i>=3?(e=this.getNextBits(10),100>e&&(r+="0"),10>e&&(r+="0"),i-=3):2==i?(e=this.getNextBits(7),10>e&&(r+="0"),i-=2):1==i&&(e=this.getNextBits(4),i-=1),r+=e;while(i>0);return r},this.get8bitByteArray=function(t){var i=t,e=0,r=new Array;do e=this.getNextBits(8),r.push(e),i--;while(i>0);return r},this.getKanjiString=function(t){var i=t,e=0,r="";do{e=getNextBits(13);var n=e%192,h=e/192,o=(h<<8)+n,s=0;s=40956>=o+33088?o+33088:o+49472,r+=String.fromCharCode(s),i--}while(i>0);return r},this.__defineGetter__("DataByte",function(){for(var t=new Array,i=1,e=2,r=4,n=8;;){var h=this.NextMode();if(0==h){if(t.length>0)break;throw"Empty data block"}if(h!=i&&h!=e&&h!=r&&h!=n)throw"Invalid mode: "+h+" in (block:"+this.blockPointer+" bit:"+this.bitPointer+")";if(dataLength=this.getDataLength(h),dataLength<1)throw"Invalid data length: "+dataLength;switch(h){case i:for(var o=this.getFigureString(dataLength),s=new Array(o.length),a=0;a<o.length;a++)s[a]=o.charCodeAt(a);t.push(s);break;case e:for(var o=this.getRomanAndFigureString(dataLength),s=new Array(o.length),a=0;a<o.length;a++)s[a]=o.charCodeAt(a);t.push(s);break;case r:var b=this.get8bitByteArray(dataLength);t.push(b);break;case n:var o=this.getKanjiString(dataLength);t.push(o)}}return t})}
function DataMask000(){this.unmaskBitMatrix=function(a,t){for(var i=0;t>i;i++)for(var s=0;t>s;s++)this.isMasked(i,s)&&a.flip(s,i)},this.isMasked=function(a,t){return 0==(a+t&1)}}function DataMask001(){this.unmaskBitMatrix=function(a,t){for(var i=0;t>i;i++)for(var s=0;t>s;s++)this.isMasked(i,s)&&a.flip(s,i)},this.isMasked=function(a,t){return 0==(1&a)}}function DataMask010(){this.unmaskBitMatrix=function(a,t){for(var i=0;t>i;i++)for(var s=0;t>s;s++)this.isMasked(i,s)&&a.flip(s,i)},this.isMasked=function(a,t){return t%3==0}}function DataMask011(){this.unmaskBitMatrix=function(a,t){for(var i=0;t>i;i++)for(var s=0;t>s;s++)this.isMasked(i,s)&&a.flip(s,i)},this.isMasked=function(a,t){return(a+t)%3==0}}function DataMask100(){this.unmaskBitMatrix=function(a,t){for(var i=0;t>i;i++)for(var s=0;t>s;s++)this.isMasked(i,s)&&a.flip(s,i)},this.isMasked=function(a,t){return 0==(URShift(a,1)+t/3&1)}}function DataMask101(){this.unmaskBitMatrix=function(a,t){for(var i=0;t>i;i++)for(var s=0;t>s;s++)this.isMasked(i,s)&&a.flip(s,i)},this.isMasked=function(a,t){var i=a*t;return(1&i)+i%3==0}}function DataMask110(){this.unmaskBitMatrix=function(a,t){for(var i=0;t>i;i++)for(var s=0;t>s;s++)this.isMasked(i,s)&&a.flip(s,i)},this.isMasked=function(a,t){var i=a*t;return 0==((1&i)+i%3&1)}}function DataMask111(){this.unmaskBitMatrix=function(a,t){for(var i=0;t>i;i++)for(var s=0;t>s;s++)this.isMasked(i,s)&&a.flip(s,i)},this.isMasked=function(a,t){return 0==((a+t&1)+a*t%3&1)}}DataMask={},DataMask.forReference=function(a){if(0>a||a>7)throw"System.ArgumentException";return DataMask.DATA_MASKS[a]},DataMask.DATA_MASKS=new Array(new DataMask000,new DataMask001,new DataMask010,new DataMask011,new DataMask100,new DataMask101,new DataMask110,new DataMask111);
Decoder={},Decoder.rsDecoder=new ReedSolomonDecoder(GF256.QR_CODE_FIELD),Decoder.correctErrors=function(r,e){for(var o=r.length,a=new Array(o),d=0;o>d;d++)a[d]=255&r[d];var t=r.length-e;try{Decoder.rsDecoder.decode(a,t)}catch(c){throw c}for(var d=0;e>d;d++)r[d]=a[d]},Decoder.decode=function(r){for(var e=new BitMatrixParser(r),o=e.readVersion(),a=e.readFormatInformation().ErrorCorrectionLevel,d=e.readCodewords(),t=DataBlock.getDataBlocks(d,o,a),c=0,n=0;n<t.length;n++)c+=t[n].NumDataCodewords;for(var D=new Array(c),s=0,w=0;w<t.length;w++){var i=t[w],l=i.Codewords,v=i.NumDataCodewords;Decoder.correctErrors(l,v);for(var n=0;v>n;n++)D[s++]=l[n]}var f=new QRCodeDataBlockReader(D,o.VersionNumber,a.Bits);return f};
function PerspectiveTransform(t,a,i,s,r,e,h,n,o){this.a11=t,this.a12=s,this.a13=h,this.a21=a,this.a22=r,this.a23=n,this.a31=i,this.a32=e,this.a33=o,this.transformPoints1=function(t){for(var a=t.length,i=this.a11,s=this.a12,r=this.a13,e=this.a21,h=this.a22,n=this.a23,o=this.a31,l=this.a32,f=this.a33,u=0;a>u;u+=2){var c=t[u],d=t[u+1],m=r*c+n*d+f;t[u]=(i*c+e*d+o)/m,t[u+1]=(s*c+h*d+l)/m}},this.transformPoints2=function(t,a){for(var i=t.length,s=0;i>s;s++){var r=t[s],e=a[s],h=this.a13*r+this.a23*e+this.a33;t[s]=(this.a11*r+this.a21*e+this.a31)/h,a[s]=(this.a12*r+this.a22*e+this.a32)/h}},this.buildAdjoint=function(){return new PerspectiveTransform(this.a22*this.a33-this.a23*this.a32,this.a23*this.a31-this.a21*this.a33,this.a21*this.a32-this.a22*this.a31,this.a13*this.a32-this.a12*this.a33,this.a11*this.a33-this.a13*this.a31,this.a12*this.a31-this.a11*this.a32,this.a12*this.a23-this.a13*this.a22,this.a13*this.a21-this.a11*this.a23,this.a11*this.a22-this.a12*this.a21)},this.times=function(t){return new PerspectiveTransform(this.a11*t.a11+this.a21*t.a12+this.a31*t.a13,this.a11*t.a21+this.a21*t.a22+this.a31*t.a23,this.a11*t.a31+this.a21*t.a32+this.a31*t.a33,this.a12*t.a11+this.a22*t.a12+this.a32*t.a13,this.a12*t.a21+this.a22*t.a22+this.a32*t.a23,this.a12*t.a31+this.a22*t.a32+this.a32*t.a33,this.a13*t.a11+this.a23*t.a12+this.a33*t.a13,this.a13*t.a21+this.a23*t.a22+this.a33*t.a23,this.a13*t.a31+this.a23*t.a32+this.a33*t.a33)}}function DetectorResult(t,a){this.bits=t,this.points=a}function Detector(t){this.image=t,this.resultPointCallback=null,this.sizeOfBlackWhiteBlackRun=function(t,a,i,s){var r=Math.abs(s-a)>Math.abs(i-t);if(r){var e=t;t=a,a=e,e=i,i=s,s=e}for(var h=Math.abs(i-t),n=Math.abs(s-a),o=-h>>1,l=s>a?1:-1,f=i>t?1:-1,u=0,c=t,d=a;c!=i;c+=f){var m=r?d:c,v=r?c:d;if(1==u?this.image[m+v*qrcode.width]&&u++:this.image[m+v*qrcode.width]||u++,3==u){var M=c-t,q=d-a;return Math.sqrt(M*M+q*q)}if(o+=n,o>0){if(d==s)break;d+=l,o-=h}}var y=i-t,g=s-a;return Math.sqrt(y*y+g*g)},this.sizeOfBlackWhiteBlackRunBothWays=function(t,a,i,s){var r=this.sizeOfBlackWhiteBlackRun(t,a,i,s),e=1,h=t-(i-t);0>h?(e=t/(t-h),h=0):h>=qrcode.width&&(e=(qrcode.width-1-t)/(h-t),h=qrcode.width-1);var n=Math.floor(a-(s-a)*e);return e=1,0>n?(e=a/(a-n),n=0):n>=qrcode.height&&(e=(qrcode.height-1-a)/(n-a),n=qrcode.height-1),h=Math.floor(t+(h-t)*e),r+=this.sizeOfBlackWhiteBlackRun(t,a,h,n),r-1},this.calculateModuleSizeOneWay=function(t,a){var i=this.sizeOfBlackWhiteBlackRunBothWays(Math.floor(t.X),Math.floor(t.Y),Math.floor(a.X),Math.floor(a.Y)),s=this.sizeOfBlackWhiteBlackRunBothWays(Math.floor(a.X),Math.floor(a.Y),Math.floor(t.X),Math.floor(t.Y));return isNaN(i)?s/7:isNaN(s)?i/7:(i+s)/14},this.calculateModuleSize=function(t,a,i){return(this.calculateModuleSizeOneWay(t,a)+this.calculateModuleSizeOneWay(t,i))/2},this.distance=function(t,a){return xDiff=t.X-a.X,yDiff=t.Y-a.Y,Math.sqrt(xDiff*xDiff+yDiff*yDiff)},this.computeDimension=function(t,a,i,s){var r=Math.round(this.distance(t,a)/s),e=Math.round(this.distance(t,i)/s),h=(r+e>>1)+7;switch(3&h){case 0:h++;break;case 2:h--;break;case 3:throw"Error"}return h},this.findAlignmentInRegion=function(t,a,i,s){var r=Math.floor(s*t),e=Math.max(0,a-r),h=Math.min(qrcode.width-1,a+r);if(3*t>h-e)throw"Error";var n=Math.max(0,i-r),o=Math.min(qrcode.height-1,i+r),l=new AlignmentPatternFinder(this.image,e,n,h-e,o-n,t,this.resultPointCallback);return l.find()},this.createTransform=function(t,a,i,s,r){var e,h,n,o,l=r-3.5;null!=s?(e=s.X,h=s.Y,n=o=l-3):(e=a.X-t.X+i.X,h=a.Y-t.Y+i.Y,n=o=l);var f=PerspectiveTransform.quadrilateralToQuadrilateral(3.5,3.5,l,3.5,n,o,3.5,l,t.X,t.Y,a.X,a.Y,e,h,i.X,i.Y);return f},this.sampleGrid=function(t,a,i){var s=GridSampler;return s.sampleGrid3(t,i,a)},this.processFinderPatternInfo=function(t){var a=t.TopLeft,i=t.TopRight,s=t.BottomLeft,r=this.calculateModuleSize(a,i,s);if(1>r)throw"Error";var e=this.computeDimension(a,i,s,r),h=Version.getProvisionalVersionForDimension(e),n=h.DimensionForVersion-7,o=null;if(h.AlignmentPatternCenters.length>0)for(var l=i.X-a.X+s.X,f=i.Y-a.Y+s.Y,u=1-3/n,c=Math.floor(a.X+u*(l-a.X)),d=Math.floor(a.Y+u*(f-a.Y)),m=4;16>=m;m<<=1){o=this.findAlignmentInRegion(r,c,d,m);break}var v,M=this.createTransform(a,i,s,o,e),q=this.sampleGrid(this.image,M,e);return v=null==o?new Array(s,a,i):new Array(s,a,i,o),new DetectorResult(q,v)},this.detect=function(){var t=(new FinderPatternFinder).findFinderPattern(this.image);return this.processFinderPatternInfo(t)}}PerspectiveTransform.quadrilateralToQuadrilateral=function(t,a,i,s,r,e,h,n,o,l,f,u,c,d,m,v){var M=this.quadrilateralToSquare(t,a,i,s,r,e,h,n),q=this.squareToQuadrilateral(o,l,f,u,c,d,m,v);return q.times(M)},PerspectiveTransform.squareToQuadrilateral=function(t,a,i,s,r,e,h,n){return dy2=n-e,dy3=a-s+e-n,0==dy2&&0==dy3?new PerspectiveTransform(i-t,r-i,t,s-a,e-s,a,0,0,1):(dx1=i-r,dx2=h-r,dx3=t-i+r-h,dy1=s-e,denominator=dx1*dy2-dx2*dy1,a13=(dx3*dy2-dx2*dy3)/denominator,a23=(dx1*dy3-dx3*dy1)/denominator,new PerspectiveTransform(i-t+a13*i,h-t+a23*h,t,s-a+a13*s,n-a+a23*n,a,a13,a23,1))},PerspectiveTransform.quadrilateralToSquare=function(t,a,i,s,r,e,h,n){return this.squareToQuadrilateral(t,a,i,s,r,e,h,n).buildAdjoint()};
function ErrorCorrectionLevel(r,e,n){this.ordinal_Renamed_Field=r,this.bits=e,this.name=n,this.__defineGetter__("Bits",function(){return this.bits}),this.__defineGetter__("Name",function(){return this.name}),this.ordinal=function(){return this.ordinal_Renamed_Field}}ErrorCorrectionLevel.forBits=function(r){if(0>r||r>=FOR_BITS.length)throw"ArgumentException";return FOR_BITS[r]};var L=new ErrorCorrectionLevel(0,1,"L"),M=new ErrorCorrectionLevel(1,0,"M"),Q=new ErrorCorrectionLevel(2,3,"Q"),H=new ErrorCorrectionLevel(3,2,"H"),FOR_BITS=new Array(M,L,H,Q);
function FinderPattern(t,e,r){this.x=t,this.y=e,this.count=1,this.estimatedModuleSize=r,this.__defineGetter__("EstimatedModuleSize",function(){return this.estimatedModuleSize}),this.__defineGetter__("Count",function(){return this.count}),this.__defineGetter__("X",function(){return this.x}),this.__defineGetter__("Y",function(){return this.y}),this.incrementCount=function(){this.count++},this.aboutEquals=function(t,e,r){if(Math.abs(e-this.y)<=t&&Math.abs(r-this.x)<=t){var i=Math.abs(t-this.estimatedModuleSize);return 1>=i||i/this.estimatedModuleSize<=1}return!1}}function FinderPatternInfo(t){this.bottomLeft=t[0],this.topLeft=t[1],this.topRight=t[2],this.__defineGetter__("BottomLeft",function(){return this.bottomLeft}),this.__defineGetter__("TopLeft",function(){return this.topLeft}),this.__defineGetter__("TopRight",function(){return this.topRight})}function FinderPatternFinder(){this.image=null,this.possibleCenters=[],this.hasSkipped=!1,this.crossCheckStateCount=new Array(0,0,0,0,0),this.resultPointCallback=null,this.__defineGetter__("CrossCheckStateCount",function(){return this.crossCheckStateCount[0]=0,this.crossCheckStateCount[1]=0,this.crossCheckStateCount[2]=0,this.crossCheckStateCount[3]=0,this.crossCheckStateCount[4]=0,this.crossCheckStateCount}),this.foundPatternCross=function(t){for(var e=0,r=0;5>r;r++){var i=t[r];if(0==i)return!1;e+=i}if(7>e)return!1;var s=Math.floor((e<<INTEGER_MATH_SHIFT)/7),n=Math.floor(s/2);return Math.abs(s-(t[0]<<INTEGER_MATH_SHIFT))<n&&Math.abs(s-(t[1]<<INTEGER_MATH_SHIFT))<n&&Math.abs(3*s-(t[2]<<INTEGER_MATH_SHIFT))<3*n&&Math.abs(s-(t[3]<<INTEGER_MATH_SHIFT))<n&&Math.abs(s-(t[4]<<INTEGER_MATH_SHIFT))<n},this.centerFromEnd=function(t,e){return e-t[4]-t[3]-t[2]/2},this.crossCheckVertical=function(t,e,r,i){for(var s=this.image,n=qrcode.height,o=this.CrossCheckStateCount,h=t;h>=0&&s[e+h*qrcode.width];)o[2]++,h--;if(0>h)return NaN;for(;h>=0&&!s[e+h*qrcode.width]&&o[1]<=r;)o[1]++,h--;if(0>h||o[1]>r)return NaN;for(;h>=0&&s[e+h*qrcode.width]&&o[0]<=r;)o[0]++,h--;if(o[0]>r)return NaN;for(h=t+1;n>h&&s[e+h*qrcode.width];)o[2]++,h++;if(h==n)return NaN;for(;n>h&&!s[e+h*qrcode.width]&&o[3]<r;)o[3]++,h++;if(h==n||o[3]>=r)return NaN;for(;n>h&&s[e+h*qrcode.width]&&o[4]<r;)o[4]++,h++;if(o[4]>=r)return NaN;var a=o[0]+o[1]+o[2]+o[3]+o[4];return 5*Math.abs(a-i)>=2*i?NaN:this.foundPatternCross(o)?this.centerFromEnd(o,h):NaN},this.crossCheckHorizontal=function(t,e,r,i){for(var s=this.image,n=qrcode.width,o=this.CrossCheckStateCount,h=t;h>=0&&s[h+e*qrcode.width];)o[2]++,h--;if(0>h)return NaN;for(;h>=0&&!s[h+e*qrcode.width]&&o[1]<=r;)o[1]++,h--;if(0>h||o[1]>r)return NaN;for(;h>=0&&s[h+e*qrcode.width]&&o[0]<=r;)o[0]++,h--;if(o[0]>r)return NaN;for(h=t+1;n>h&&s[h+e*qrcode.width];)o[2]++,h++;if(h==n)return NaN;for(;n>h&&!s[h+e*qrcode.width]&&o[3]<r;)o[3]++,h++;if(h==n||o[3]>=r)return NaN;for(;n>h&&s[h+e*qrcode.width]&&o[4]<r;)o[4]++,h++;if(o[4]>=r)return NaN;var a=o[0]+o[1]+o[2]+o[3]+o[4];return 5*Math.abs(a-i)>=i?NaN:this.foundPatternCross(o)?this.centerFromEnd(o,h):NaN},this.handlePossibleCenter=function(t,e,r){var i=t[0]+t[1]+t[2]+t[3]+t[4],s=this.centerFromEnd(t,r),n=this.crossCheckVertical(e,Math.floor(s),t[2],i);if(!isNaN(n)&&(s=this.crossCheckHorizontal(Math.floor(s),Math.floor(n),t[2],i),!isNaN(s))){for(var o=i/7,h=!1,a=this.possibleCenters.length,f=0;a>f;f++){var u=this.possibleCenters[f];if(u.aboutEquals(o,n,s)){u.incrementCount(),h=!0;break}}if(!h){var d=new FinderPattern(s,n,o);this.possibleCenters.push(d),null!=this.resultPointCallback&&this.resultPointCallback.foundPossibleResultPoint(d)}return!0}return!1},this.selectBestPatterns=function(){var t=this.possibleCenters.length;if(3>t)throw"Couldn't find enough finder patterns";if(t>3){for(var e=0,r=0,i=0;t>i;i++){var s=this.possibleCenters[i].EstimatedModuleSize;e+=s,r+=s*s}var n=e/t;this.possibleCenters.sort(function(t,e){var r=Math.abs(e.EstimatedModuleSize-n),i=Math.abs(t.EstimatedModuleSize-n);return i>r?-1:r==i?0:1});for(var o=Math.sqrt(r/t-n*n),h=Math.max(.2*n,o),i=0;i<this.possibleCenters.length&&this.possibleCenters.length>3;i++){var a=this.possibleCenters[i];Math.abs(a.EstimatedModuleSize-n)>h&&(this.possibleCenters.remove(i),i--)}}return this.possibleCenters.length>3&&this.possibleCenters.sort(function(t,e){return t.count>e.count?-1:t.count<e.count?1:0}),new Array(this.possibleCenters[0],this.possibleCenters[1],this.possibleCenters[2])},this.findRowSkip=function(){var t=this.possibleCenters.length;if(1>=t)return 0;for(var e=null,r=0;t>r;r++){var i=this.possibleCenters[r];if(i.Count>=CENTER_QUORUM){if(null!=e)return this.hasSkipped=!0,Math.floor((Math.abs(e.X-i.X)-Math.abs(e.Y-i.Y))/2);e=i}}return 0},this.haveMultiplyConfirmedCenters=function(){for(var t=0,e=0,r=this.possibleCenters.length,i=0;r>i;i++){var s=this.possibleCenters[i];s.Count>=CENTER_QUORUM&&(t++,e+=s.EstimatedModuleSize)}if(3>t)return!1;for(var n=e/r,o=0,i=0;r>i;i++)s=this.possibleCenters[i],o+=Math.abs(s.EstimatedModuleSize-n);return.05*e>=o},this.findFinderPattern=function(t){var e=!1;this.image=t;var r=qrcode.height,i=qrcode.width,s=Math.floor(3*r/(4*MAX_MODULES));(MIN_SKIP>s||e)&&(s=MIN_SKIP);for(var n=!1,o=new Array(5),h=s-1;r>h&&!n;h+=s){o[0]=0,o[1]=0,o[2]=0,o[3]=0,o[4]=0;for(var a=0,f=0;i>f;f++)if(t[f+h*qrcode.width])1==(1&a)&&a++,o[a]++;else if(0==(1&a))if(4==a)if(this.foundPatternCross(o)){var u=this.handlePossibleCenter(o,h,f);if(u)if(s=2,this.hasSkipped)n=this.haveMultiplyConfirmedCenters();else{var d=this.findRowSkip();d>o[2]&&(h+=d-o[2]-s,f=i-1)}else{do f++;while(i>f&&!t[f+h*qrcode.width]);f--}a=0,o[0]=0,o[1]=0,o[2]=0,o[3]=0,o[4]=0}else o[0]=o[2],o[1]=o[3],o[2]=o[4],o[3]=1,o[4]=0,a=3;else o[++a]++;else o[a]++;if(this.foundPatternCross(o)){var u=this.handlePossibleCenter(o,h,i);u&&(s=o[0],this.hasSkipped&&(n=haveMultiplyConfirmedCenters()))}}var l=this.selectBestPatterns();return qrcode.orderBestPatterns(l),new FinderPatternInfo(l)}}var MIN_SKIP=3,MAX_MODULES=57,INTEGER_MATH_SHIFT=8,CENTER_QUORUM=2;qrcode.orderBestPatterns=function(t){function e(t,e){return xDiff=t.X-e.X,yDiff=t.Y-e.Y,Math.sqrt(xDiff*xDiff+yDiff*yDiff)}function r(t,e,r){var i=e.x,s=e.y;return(r.x-i)*(t.y-s)-(r.y-s)*(t.x-i)}var i,s,n,o=e(t[0],t[1]),h=e(t[1],t[2]),a=e(t[0],t[2]);if(h>=o&&h>=a?(s=t[0],i=t[1],n=t[2]):a>=h&&a>=o?(s=t[1],i=t[0],n=t[2]):(s=t[2],i=t[0],n=t[1]),r(i,s,n)<0){var f=i;i=n,n=f}t[0]=i,t[1]=s,t[2]=n};
function FormatInformation(r){this.errorCorrectionLevel=ErrorCorrectionLevel.forBits(r>>3&3),this.dataMask=7&r,this.__defineGetter__("ErrorCorrectionLevel",function(){return this.errorCorrectionLevel}),this.__defineGetter__("DataMask",function(){return this.dataMask}),this.GetHashCode=function(){return this.errorCorrectionLevel.ordinal()<<3|dataMask},this.Equals=function(r){var n=r;return this.errorCorrectionLevel==n.errorCorrectionLevel&&this.dataMask==n.dataMask}}var FORMAT_INFO_MASK_QR=21522,FORMAT_INFO_DECODE_LOOKUP=new Array(new Array(21522,0),new Array(20773,1),new Array(24188,2),new Array(23371,3),new Array(17913,4),new Array(16590,5),new Array(20375,6),new Array(19104,7),new Array(30660,8),new Array(29427,9),new Array(32170,10),new Array(30877,11),new Array(26159,12),new Array(25368,13),new Array(27713,14),new Array(26998,15),new Array(5769,16),new Array(5054,17),new Array(7399,18),new Array(6608,19),new Array(1890,20),new Array(597,21),new Array(3340,22),new Array(2107,23),new Array(13663,24),new Array(12392,25),new Array(16177,26),new Array(14854,27),new Array(9396,28),new Array(8579,29),new Array(11994,30),new Array(11245,31)),BITS_SET_IN_HALF_BYTE=new Array(0,1,1,2,1,2,2,3,1,2,2,3,2,3,3,4);FormatInformation.numBitsDiffering=function(r,n){return r^=n,BITS_SET_IN_HALF_BYTE[15&r]+BITS_SET_IN_HALF_BYTE[15&URShift(r,4)]+BITS_SET_IN_HALF_BYTE[15&URShift(r,8)]+BITS_SET_IN_HALF_BYTE[15&URShift(r,12)]+BITS_SET_IN_HALF_BYTE[15&URShift(r,16)]+BITS_SET_IN_HALF_BYTE[15&URShift(r,20)]+BITS_SET_IN_HALF_BYTE[15&URShift(r,24)]+BITS_SET_IN_HALF_BYTE[15&URShift(r,28)]},FormatInformation.decodeFormatInformation=function(r){var n=FormatInformation.doDecodeFormatInformation(r);return null!=n?n:FormatInformation.doDecodeFormatInformation(r^FORMAT_INFO_MASK_QR)},FormatInformation.doDecodeFormatInformation=function(r){for(var n=4294967295,e=0,a=0;a<FORMAT_INFO_DECODE_LOOKUP.length;a++){var t=FORMAT_INFO_DECODE_LOOKUP[a],o=t[0];if(o==r)return new FormatInformation(t[1]);var _=this.numBitsDiffering(r,o);n>_&&(e=t[1],n=_)}return 3>=n?new FormatInformation(e):null};
function GF256(e){this.expTable=new Array(256),this.logTable=new Array(256);for(var t=1,r=0;256>r;r++)this.expTable[r]=t,t<<=1,t>=256&&(t^=e);for(var r=0;255>r;r++)this.logTable[this.expTable[r]]=r;var n=new Array(1);n[0]=0,this.zero=new GF256Poly(this,new Array(n));var i=new Array(1);i[0]=1,this.one=new GF256Poly(this,new Array(i)),this.__defineGetter__("Zero",function(){return this.zero}),this.__defineGetter__("One",function(){return this.one}),this.buildMonomial=function(e,t){if(0>e)throw"System.ArgumentException";if(0==t)return zero;for(var r=new Array(e+1),n=0;n<r.length;n++)r[n]=0;return r[0]=t,new GF256Poly(this,r)},this.exp=function(e){return this.expTable[e]},this.log=function(e){if(0==e)throw"System.ArgumentException";return this.logTable[e]},this.inverse=function(e){if(0==e)throw"System.ArithmeticException";return this.expTable[255-this.logTable[e]]},this.multiply=function(e,t){return 0==e||0==t?0:1==e?t:1==t?e:this.expTable[(this.logTable[e]+this.logTable[t])%255]}}GF256.QR_CODE_FIELD=new GF256(285),GF256.DATA_MATRIX_FIELD=new GF256(301),GF256.addOrSubtract=function(e,t){return e^t};
function GF256Poly(e,i){if(null==i||0==i.length)throw"System.ArgumentException";this.field=e;var t=i.length;if(t>1&&0==i[0]){for(var f=1;t>f&&0==i[f];)f++;if(f==t)this.coefficients=e.Zero.coefficients;else{this.coefficients=new Array(t-f);for(var r=0;r<this.coefficients.length;r++)this.coefficients[r]=0;for(var n=0;n<this.coefficients.length;n++)this.coefficients[n]=i[f+n]}}else this.coefficients=i;this.__defineGetter__("Zero",function(){return 0==this.coefficients[0]}),this.__defineGetter__("Degree",function(){return this.coefficients.length-1}),this.__defineGetter__("Coefficients",function(){return this.coefficients}),this.getCoefficient=function(e){return this.coefficients[this.coefficients.length-1-e]},this.evaluateAt=function(e){if(0==e)return this.getCoefficient(0);var i=this.coefficients.length;if(1==e){for(var t=0,f=0;i>f;f++)t=GF256.addOrSubtract(t,this.coefficients[f]);return t}for(var r=this.coefficients[0],f=1;i>f;f++)r=GF256.addOrSubtract(this.field.multiply(e,r),this.coefficients[f]);return r},this.addOrSubtract=function(i){if(this.field!=i.field)throw"GF256Polys do not have same GF256 field";if(this.Zero)return i;if(i.Zero)return this;var t=this.coefficients,f=i.coefficients;if(t.length>f.length){var r=t;t=f,f=r}for(var n=new Array(f.length),o=f.length-t.length,s=0;o>s;s++)n[s]=f[s];for(var h=o;h<f.length;h++)n[h]=GF256.addOrSubtract(t[h-o],f[h]);return new GF256Poly(e,n)},this.multiply1=function(e){if(this.field!=e.field)throw"GF256Polys do not have same GF256 field";if(this.Zero||e.Zero)return this.field.Zero;for(var i=this.coefficients,t=i.length,f=e.coefficients,r=f.length,n=new Array(t+r-1),o=0;t>o;o++)for(var s=i[o],h=0;r>h;h++)n[o+h]=GF256.addOrSubtract(n[o+h],this.field.multiply(s,f[h]));return new GF256Poly(this.field,n)},this.multiply2=function(e){if(0==e)return this.field.Zero;if(1==e)return this;for(var i=this.coefficients.length,t=new Array(i),f=0;i>f;f++)t[f]=this.field.multiply(this.coefficients[f],e);return new GF256Poly(this.field,t)},this.multiplyByMonomial=function(e,i){if(0>e)throw"System.ArgumentException";if(0==i)return this.field.Zero;for(var t=this.coefficients.length,f=new Array(t+e),r=0;r<f.length;r++)f[r]=0;for(var r=0;t>r;r++)f[r]=this.field.multiply(this.coefficients[r],i);return new GF256Poly(this.field,f)},this.divide=function(e){if(this.field!=e.field)throw"GF256Polys do not have same GF256 field";if(e.Zero)throw"Divide by 0";for(var i=this.field.Zero,t=this,f=e.getCoefficient(e.Degree),r=this.field.inverse(f);t.Degree>=e.Degree&&!t.Zero;){var n=t.Degree-e.Degree,o=this.field.multiply(t.getCoefficient(t.Degree),r),s=e.multiplyByMonomial(n,o),h=this.field.buildMonomial(n,o);i=i.addOrSubtract(h),t=t.addOrSubtract(s)}return new Array(i,t)}}
GridSampler={},GridSampler.checkAndNudgePoints=function(r,a){for(var e=qrcode.width,o=qrcode.height,t=!0,d=0;d<a.length&&t;d+=2){var i=Math.floor(a[d]),n=Math.floor(a[d+1]);if(-1>i||i>e||-1>n||n>o)throw"Error.checkAndNudgePoints ";t=!1,-1==i?(a[d]=0,t=!0):i==e&&(a[d]=e-1,t=!0),-1==n?(a[d+1]=0,t=!0):n==o&&(a[d+1]=o-1,t=!0)}t=!0;for(var d=a.length-2;d>=0&&t;d-=2){var i=Math.floor(a[d]),n=Math.floor(a[d+1]);if(-1>i||i>e||-1>n||n>o)throw"Error.checkAndNudgePoints ";t=!1,-1==i?(a[d]=0,t=!0):i==e&&(a[d]=e-1,t=!0),-1==n?(a[d+1]=0,t=!0):n==o&&(a[d+1]=o-1,t=!0)}},GridSampler.sampleGrid3=function(r,a,e){for(var o=new BitMatrix(a),t=new Array(a<<1),d=0;a>d;d++){for(var i=t.length,n=d+.5,h=0;i>h;h+=2)t[h]=(h>>1)+.5,t[h+1]=n;e.transformPoints1(t),GridSampler.checkAndNudgePoints(r,t);try{for(var h=0;i>h;h+=2){var c=4*Math.floor(t[h])+Math.floor(t[h+1])*qrcode.width*4,l=r[Math.floor(t[h])+qrcode.width*Math.floor(t[h+1])];qrcode.imagedata.data[c]=l?255:0,qrcode.imagedata.data[c+1]=l?255:0,qrcode.imagedata.data[c+2]=0,qrcode.imagedata.data[c+3]=255,l&&o.set_Renamed(h>>1,d)}}catch(f){throw"Error.checkAndNudgePoints"}}return o},GridSampler.sampleGridx=function(r,a,e,o,t,d,i,n,h,c,l,f,m,g,s,u,p,v){var q=PerspectiveTransform.quadrilateralToQuadrilateral(e,o,t,d,i,n,h,c,l,f,m,g,s,u,p,v);return GridSampler.sampleGrid3(r,a,q)};
function URShift(e,r){return e>=0?e>>r:(e>>r)+(2<<~r)}qrcode={},qrcode.imagedata=null,qrcode.width=0,qrcode.height=0,qrcode.qrCodeSymbol=null,qrcode.debug=!1,qrcode.maxImgSize=1048576,qrcode.sizeOfDataLengthInfo=[[10,9,8,8],[12,11,16,10],[14,13,16,12]],qrcode.callback=null,qrcode.decode=function(e){if(0==arguments.length){var r=document.getElementById("qr-canvas"),t=r.getContext("2d");return qrcode.width=r.width,qrcode.height=r.height,qrcode.imagedata=t.getImageData(0,0,qrcode.width,qrcode.height),qrcode.result=qrcode.process(t),null!=qrcode.callback&&qrcode.callback(qrcode.result),qrcode.result}var o=new Image;o.onload=function(){var e=document.createElement("canvas"),r=e.getContext("2d"),t=o.height,d=o.width;if(o.width*o.height>qrcode.maxImgSize){var a=o.width/o.height;t=Math.sqrt(qrcode.maxImgSize/a),d=a*t}e.width=d,e.height=t,r.drawImage(o,0,0,e.width,e.height),qrcode.width=e.width,qrcode.height=e.height;try{qrcode.imagedata=r.getImageData(0,0,e.width,e.height)}catch(c){return qrcode.result="Cross domain image reading not supported in your browser! Save it to your computer then drag and drop the file!",void(null!=qrcode.callback&&qrcode.callback(qrcode.result))}try{qrcode.result=qrcode.process(r)}catch(c){console.log(c),qrcode.result="error decoding QR Code"}null!=qrcode.callback&&qrcode.callback(qrcode.result)},o.src=e},qrcode.isUrl=function(e){var r=/(ftp|http|https):\/\/(\w+:{0,1}\w*@)?(\S+)(:[0-9]+)?(\/|\/([\w#!:.?+=&%@!\-\/]))?/;return r.test(e)},qrcode.decode_url=function(e){var r="";try{r=escape(e)}catch(t){console.log(t),r=e}var o="";try{o=decodeURIComponent(r)}catch(t){console.log(t),o=r}return o},qrcode.decode_utf8=function(e){return qrcode.isUrl(e)?qrcode.decode_url(e):e},qrcode.process=function(e){var r=(new Date).getTime(),t=qrcode.grayScaleToBitmap(qrcode.grayscale());if(qrcode.debug){for(var o=0;o<qrcode.height;o++)for(var d=0;d<qrcode.width;d++){var a=4*d+o*qrcode.width*4;qrcode.imagedata.data[a]=(t[d+o*qrcode.width],0),qrcode.imagedata.data[a+1]=(t[d+o*qrcode.width],0),qrcode.imagedata.data[a+2]=t[d+o*qrcode.width]?255:0}e.putImageData(qrcode.imagedata,0,0)}var c=new Detector(t),i=c.detect();qrcode.debug&&e.putImageData(qrcode.imagedata,0,0);for(var h=Decoder.decode(i.bits),n=h.DataByte,q="",g=0;g<n.length;g++)for(var l=0;l<n[g].length;l++)q+=String.fromCharCode(n[g][l]);var u=(new Date).getTime(),f=u-r;return console.log(f),qrcode.decode_utf8(q)},qrcode.getPixel=function(e,r){if(qrcode.width<e)throw"point error";if(qrcode.height<r)throw"point error";return point=4*e+r*qrcode.width*4,p=(33*qrcode.imagedata.data[point]+34*qrcode.imagedata.data[point+1]+33*qrcode.imagedata.data[point+2])/100,p},qrcode.binarize=function(e){for(var r=new Array(qrcode.width*qrcode.height),t=0;t<qrcode.height;t++)for(var o=0;o<qrcode.width;o++){var d=qrcode.getPixel(o,t);r[o+t*qrcode.width]=e>=d?!0:!1}return r},qrcode.getMiddleBrightnessPerArea=function(e){for(var r=4,t=Math.floor(qrcode.width/r),o=Math.floor(qrcode.height/r),d=new Array(r),a=0;r>a;a++){d[a]=new Array(r);for(var c=0;r>c;c++)d[a][c]=new Array(0,0)}for(var i=0;r>i;i++)for(var h=0;r>h;h++){d[h][i][0]=255;for(var n=0;o>n;n++)for(var q=0;t>q;q++){var g=e[t*h+q+(o*i+n)*qrcode.width];g<d[h][i][0]&&(d[h][i][0]=g),g>d[h][i][1]&&(d[h][i][1]=g)}}for(var l=new Array(r),u=0;r>u;u++)l[u]=new Array(r);for(var i=0;r>i;i++)for(var h=0;r>h;h++)l[h][i]=Math.floor((d[h][i][0]+d[h][i][1])/2);return l},qrcode.grayScaleToBitmap=function(e){for(var r=qrcode.getMiddleBrightnessPerArea(e),t=r.length,o=Math.floor(qrcode.width/t),d=Math.floor(qrcode.height/t),a=new Array(qrcode.height*qrcode.width),c=0;t>c;c++)for(var i=0;t>i;i++)for(var h=0;d>h;h++)for(var n=0;o>n;n++)a[o*i+n+(d*c+h)*qrcode.width]=e[o*i+n+(d*c+h)*qrcode.width]<r[i][c]?!0:!1;return a},qrcode.grayscale=function(){for(var e=new Array(qrcode.width*qrcode.height),r=0;r<qrcode.height;r++)for(var t=0;t<qrcode.width;t++){var o=qrcode.getPixel(t,r);e[t+r*qrcode.width]=o}return e},Array.prototype.remove=function(e,r){var t=this.slice((r||e)+1||this.length);return this.length=0>e?this.length+e:e,this.push.apply(this,t)};
function ReedSolomonDecoder(e){this.field=e,this.decode=function(e,i){for(var r=new GF256Poly(this.field,e),t=new Array(i),o=0;o<t.length;o++)t[o]=0;for(var l=!1,n=!0,o=0;i>o;o++){var a=r.evaluateAt(this.field.exp(l?o+1:o));t[t.length-1-o]=a,0!=a&&(n=!1)}if(!n)for(var f=new GF256Poly(this.field,t),d=this.runEuclideanAlgorithm(this.field.buildMonomial(i,1),f,i),s=d[0],h=d[1],u=this.findErrorLocations(s),c=this.findErrorMagnitudes(h,u,l),o=0;o<u.length;o++){var g=e.length-1-this.field.log(u[o]);if(0>g)throw"ReedSolomonException Bad error location";e[g]=GF256.addOrSubtract(e[g],c[o])}},this.runEuclideanAlgorithm=function(e,i,r){if(e.Degree<i.Degree){var t=e;e=i,i=t}for(var o=e,l=i,n=this.field.One,a=this.field.Zero,f=this.field.Zero,d=this.field.One;l.Degree>=Math.floor(r/2);){var s=o,h=n,u=f;if(o=l,n=a,f=d,o.Zero)throw"r_{i-1} was zero";l=s;for(var c=this.field.Zero,g=o.getCoefficient(o.Degree),v=this.field.inverse(g);l.Degree>=o.Degree&&!l.Zero;){var m=l.Degree-o.Degree,y=this.field.multiply(l.getCoefficient(l.Degree),v);c=c.addOrSubtract(this.field.buildMonomial(m,y)),l=l.addOrSubtract(o.multiplyByMonomial(m,y))}a=c.multiply1(n).addOrSubtract(h),d=c.multiply1(f).addOrSubtract(u)}var p=d.getCoefficient(0);if(0==p)throw"ReedSolomonException sigmaTilde(0) was zero";var w=this.field.inverse(p),D=d.multiply2(w),A=l.multiply2(w);return new Array(D,A)},this.findErrorLocations=function(e){var i=e.Degree;if(1==i)return new Array(e.getCoefficient(1));for(var r=new Array(i),t=0,o=1;256>o&&i>t;o++)0==e.evaluateAt(o)&&(r[t]=this.field.inverse(o),t++);if(t!=i)throw"Error locator degree does not match number of roots";return r},this.findErrorMagnitudes=function(e,i,r){for(var t=i.length,o=new Array(t),l=0;t>l;l++){for(var n=this.field.inverse(i[l]),a=1,f=0;t>f;f++)l!=f&&(a=this.field.multiply(a,GF256.addOrSubtract(1,this.field.multiply(i[f],n))));o[l]=this.field.multiply(e.evaluateAt(n),this.field.inverse(a)),r&&(o[l]=this.field.multiply(o[l],n))}return o}}
function ECB(e,n){this.count=e,this.dataCodewords=n,this.__defineGetter__("Count",function(){return this.count}),this.__defineGetter__("DataCodewords",function(){return this.dataCodewords})}function ECBlocks(e,n,w){this.ecCodewordsPerBlock=e,w?this.ecBlocks=new Array(n,w):this.ecBlocks=new Array(n),this.__defineGetter__("ECCodewordsPerBlock",function(){return this.ecCodewordsPerBlock}),this.__defineGetter__("TotalECCodewords",function(){return this.ecCodewordsPerBlock*this.NumBlocks}),this.__defineGetter__("NumBlocks",function(){for(var e=0,n=0;n<this.ecBlocks.length;n++)e+=this.ecBlocks[n].length;return e}),this.getECBlocks=function(){return this.ecBlocks}}function Version(e,n,w,C,E,B){this.versionNumber=e,this.alignmentPatternCenters=n,this.ecBlocks=new Array(w,C,E,B);for(var o=0,s=w.ECCodewordsPerBlock,r=w.getECBlocks(),c=0;c<r.length;c++){var l=r[c];o+=l.Count*(l.DataCodewords+s)}this.totalCodewords=o,this.__defineGetter__("VersionNumber",function(){return this.versionNumber}),this.__defineGetter__("AlignmentPatternCenters",function(){return this.alignmentPatternCenters}),this.__defineGetter__("TotalCodewords",function(){return this.totalCodewords}),this.__defineGetter__("DimensionForVersion",function(){return 17+4*this.versionNumber}),this.buildFunctionPattern=function(){var e=this.DimensionForVersion,n=new BitMatrix(e);n.setRegion(0,0,9,9),n.setRegion(e-8,0,8,9),n.setRegion(0,e-8,9,8);for(var w=this.alignmentPatternCenters.length,C=0;w>C;C++)for(var E=this.alignmentPatternCenters[C]-2,B=0;w>B;B++)0==C&&(0==B||B==w-1)||C==w-1&&0==B||n.setRegion(this.alignmentPatternCenters[B]-2,E,5,5);return n.setRegion(6,9,1,e-17),n.setRegion(9,6,e-17,1),this.versionNumber>6&&(n.setRegion(e-11,0,3,6),n.setRegion(0,e-11,6,3)),n},this.getECBlocksForLevel=function(e){return this.ecBlocks[e.ordinal()]}}function buildVersions(){return new Array(new Version(1,new Array,new ECBlocks(7,new ECB(1,19)),new ECBlocks(10,new ECB(1,16)),new ECBlocks(13,new ECB(1,13)),new ECBlocks(17,new ECB(1,9))),new Version(2,new Array(6,18),new ECBlocks(10,new ECB(1,34)),new ECBlocks(16,new ECB(1,28)),new ECBlocks(22,new ECB(1,22)),new ECBlocks(28,new ECB(1,16))),new Version(3,new Array(6,22),new ECBlocks(15,new ECB(1,55)),new ECBlocks(26,new ECB(1,44)),new ECBlocks(18,new ECB(2,17)),new ECBlocks(22,new ECB(2,13))),new Version(4,new Array(6,26),new ECBlocks(20,new ECB(1,80)),new ECBlocks(18,new ECB(2,32)),new ECBlocks(26,new ECB(2,24)),new ECBlocks(16,new ECB(4,9))),new Version(5,new Array(6,30),new ECBlocks(26,new ECB(1,108)),new ECBlocks(24,new ECB(2,43)),new ECBlocks(18,new ECB(2,15),new ECB(2,16)),new ECBlocks(22,new ECB(2,11),new ECB(2,12))),new Version(6,new Array(6,34),new ECBlocks(18,new ECB(2,68)),new ECBlocks(16,new ECB(4,27)),new ECBlocks(24,new ECB(4,19)),new ECBlocks(28,new ECB(4,15))),new Version(7,new Array(6,22,38),new ECBlocks(20,new ECB(2,78)),new ECBlocks(18,new ECB(4,31)),new ECBlocks(18,new ECB(2,14),new ECB(4,15)),new ECBlocks(26,new ECB(4,13),new ECB(1,14))),new Version(8,new Array(6,24,42),new ECBlocks(24,new ECB(2,97)),new ECBlocks(22,new ECB(2,38),new ECB(2,39)),new ECBlocks(22,new ECB(4,18),new ECB(2,19)),new ECBlocks(26,new ECB(4,14),new ECB(2,15))),new Version(9,new Array(6,26,46),new ECBlocks(30,new ECB(2,116)),new ECBlocks(22,new ECB(3,36),new ECB(2,37)),new ECBlocks(20,new ECB(4,16),new ECB(4,17)),new ECBlocks(24,new ECB(4,12),new ECB(4,13))),new Version(10,new Array(6,28,50),new ECBlocks(18,new ECB(2,68),new ECB(2,69)),new ECBlocks(26,new ECB(4,43),new ECB(1,44)),new ECBlocks(24,new ECB(6,19),new ECB(2,20)),new ECBlocks(28,new ECB(6,15),new ECB(2,16))),new Version(11,new Array(6,30,54),new ECBlocks(20,new ECB(4,81)),new ECBlocks(30,new ECB(1,50),new ECB(4,51)),new ECBlocks(28,new ECB(4,22),new ECB(4,23)),new ECBlocks(24,new ECB(3,12),new ECB(8,13))),new Version(12,new Array(6,32,58),new ECBlocks(24,new ECB(2,92),new ECB(2,93)),new ECBlocks(22,new ECB(6,36),new ECB(2,37)),new ECBlocks(26,new ECB(4,20),new ECB(6,21)),new ECBlocks(28,new ECB(7,14),new ECB(4,15))),new Version(13,new Array(6,34,62),new ECBlocks(26,new ECB(4,107)),new ECBlocks(22,new ECB(8,37),new ECB(1,38)),new ECBlocks(24,new ECB(8,20),new ECB(4,21)),new ECBlocks(22,new ECB(12,11),new ECB(4,12))),new Version(14,new Array(6,26,46,66),new ECBlocks(30,new ECB(3,115),new ECB(1,116)),new ECBlocks(24,new ECB(4,40),new ECB(5,41)),new ECBlocks(20,new ECB(11,16),new ECB(5,17)),new ECBlocks(24,new ECB(11,12),new ECB(5,13))),new Version(15,new Array(6,26,48,70),new ECBlocks(22,new ECB(5,87),new ECB(1,88)),new ECBlocks(24,new ECB(5,41),new ECB(5,42)),new ECBlocks(30,new ECB(5,24),new ECB(7,25)),new ECBlocks(24,new ECB(11,12),new ECB(7,13))),new Version(16,new Array(6,26,50,74),new ECBlocks(24,new ECB(5,98),new ECB(1,99)),new ECBlocks(28,new ECB(7,45),new ECB(3,46)),new ECBlocks(24,new ECB(15,19),new ECB(2,20)),new ECBlocks(30,new ECB(3,15),new ECB(13,16))),new Version(17,new Array(6,30,54,78),new ECBlocks(28,new ECB(1,107),new ECB(5,108)),new ECBlocks(28,new ECB(10,46),new ECB(1,47)),new ECBlocks(28,new ECB(1,22),new ECB(15,23)),new ECBlocks(28,new ECB(2,14),new ECB(17,15))),new Version(18,new Array(6,30,56,82),new ECBlocks(30,new ECB(5,120),new ECB(1,121)),new ECBlocks(26,new ECB(9,43),new ECB(4,44)),new ECBlocks(28,new ECB(17,22),new ECB(1,23)),new ECBlocks(28,new ECB(2,14),new ECB(19,15))),new Version(19,new Array(6,30,58,86),new ECBlocks(28,new ECB(3,113),new ECB(4,114)),new ECBlocks(26,new ECB(3,44),new ECB(11,45)),new ECBlocks(26,new ECB(17,21),new ECB(4,22)),new ECBlocks(26,new ECB(9,13),new ECB(16,14))),new Version(20,new Array(6,34,62,90),new ECBlocks(28,new ECB(3,107),new ECB(5,108)),new ECBlocks(26,new ECB(3,41),new ECB(13,42)),new ECBlocks(30,new ECB(15,24),new ECB(5,25)),new ECBlocks(28,new ECB(15,15),new ECB(10,16))),new Version(21,new Array(6,28,50,72,94),new ECBlocks(28,new ECB(4,116),new ECB(4,117)),new ECBlocks(26,new ECB(17,42)),new ECBlocks(28,new ECB(17,22),new ECB(6,23)),new ECBlocks(30,new ECB(19,16),new ECB(6,17))),new Version(22,new Array(6,26,50,74,98),new ECBlocks(28,new ECB(2,111),new ECB(7,112)),new ECBlocks(28,new ECB(17,46)),new ECBlocks(30,new ECB(7,24),new ECB(16,25)),new ECBlocks(24,new ECB(34,13))),new Version(23,new Array(6,30,54,74,102),new ECBlocks(30,new ECB(4,121),new ECB(5,122)),new ECBlocks(28,new ECB(4,47),new ECB(14,48)),new ECBlocks(30,new ECB(11,24),new ECB(14,25)),new ECBlocks(30,new ECB(16,15),new ECB(14,16))),new Version(24,new Array(6,28,54,80,106),new ECBlocks(30,new ECB(6,117),new ECB(4,118)),new ECBlocks(28,new ECB(6,45),new ECB(14,46)),new ECBlocks(30,new ECB(11,24),new ECB(16,25)),new ECBlocks(30,new ECB(30,16),new ECB(2,17))),new Version(25,new Array(6,32,58,84,110),new ECBlocks(26,new ECB(8,106),new ECB(4,107)),new ECBlocks(28,new ECB(8,47),new ECB(13,48)),new ECBlocks(30,new ECB(7,24),new ECB(22,25)),new ECBlocks(30,new ECB(22,15),new ECB(13,16))),new Version(26,new Array(6,30,58,86,114),new ECBlocks(28,new ECB(10,114),new ECB(2,115)),new ECBlocks(28,new ECB(19,46),new ECB(4,47)),new ECBlocks(28,new ECB(28,22),new ECB(6,23)),new ECBlocks(30,new ECB(33,16),new ECB(4,17))),new Version(27,new Array(6,34,62,90,118),new ECBlocks(30,new ECB(8,122),new ECB(4,123)),new ECBlocks(28,new ECB(22,45),new ECB(3,46)),new ECBlocks(30,new ECB(8,23),new ECB(26,24)),new ECBlocks(30,new ECB(12,15),new ECB(28,16))),new Version(28,new Array(6,26,50,74,98,122),new ECBlocks(30,new ECB(3,117),new ECB(10,118)),new ECBlocks(28,new ECB(3,45),new ECB(23,46)),new ECBlocks(30,new ECB(4,24),new ECB(31,25)),new ECBlocks(30,new ECB(11,15),new ECB(31,16))),new Version(29,new Array(6,30,54,78,102,126),new ECBlocks(30,new ECB(7,116),new ECB(7,117)),new ECBlocks(28,new ECB(21,45),new ECB(7,46)),new ECBlocks(30,new ECB(1,23),new ECB(37,24)),new ECBlocks(30,new ECB(19,15),new ECB(26,16))),new Version(30,new Array(6,26,52,78,104,130),new ECBlocks(30,new ECB(5,115),new ECB(10,116)),new ECBlocks(28,new ECB(19,47),new ECB(10,48)),new ECBlocks(30,new ECB(15,24),new ECB(25,25)),new ECBlocks(30,new ECB(23,15),new ECB(25,16))),new Version(31,new Array(6,30,56,82,108,134),new ECBlocks(30,new ECB(13,115),new ECB(3,116)),new ECBlocks(28,new ECB(2,46),new ECB(29,47)),new ECBlocks(30,new ECB(42,24),new ECB(1,25)),new ECBlocks(30,new ECB(23,15),new ECB(28,16))),new Version(32,new Array(6,34,60,86,112,138),new ECBlocks(30,new ECB(17,115)),new ECBlocks(28,new ECB(10,46),new ECB(23,47)),new ECBlocks(30,new ECB(10,24),new ECB(35,25)),new ECBlocks(30,new ECB(19,15),new ECB(35,16))),new Version(33,new Array(6,30,58,86,114,142),new ECBlocks(30,new ECB(17,115),new ECB(1,116)),new ECBlocks(28,new ECB(14,46),new ECB(21,47)),new ECBlocks(30,new ECB(29,24),new ECB(19,25)),new ECBlocks(30,new ECB(11,15),new ECB(46,16))),new Version(34,new Array(6,34,62,90,118,146),new ECBlocks(30,new ECB(13,115),new ECB(6,116)),new ECBlocks(28,new ECB(14,46),new ECB(23,47)),new ECBlocks(30,new ECB(44,24),new ECB(7,25)),new ECBlocks(30,new ECB(59,16),new ECB(1,17))),new Version(35,new Array(6,30,54,78,102,126,150),new ECBlocks(30,new ECB(12,121),new ECB(7,122)),new ECBlocks(28,new ECB(12,47),new ECB(26,48)),new ECBlocks(30,new ECB(39,24),new ECB(14,25)),new ECBlocks(30,new ECB(22,15),new ECB(41,16))),new Version(36,new Array(6,24,50,76,102,128,154),new ECBlocks(30,new ECB(6,121),new ECB(14,122)),new ECBlocks(28,new ECB(6,47),new ECB(34,48)),new ECBlocks(30,new ECB(46,24),new ECB(10,25)),new ECBlocks(30,new ECB(2,15),new ECB(64,16))),new Version(37,new Array(6,28,54,80,106,132,158),new ECBlocks(30,new ECB(17,122),new ECB(4,123)),new ECBlocks(28,new ECB(29,46),new ECB(14,47)),new ECBlocks(30,new ECB(49,24),new ECB(10,25)),new ECBlocks(30,new ECB(24,15),new ECB(46,16))),new Version(38,new Array(6,32,58,84,110,136,162),new ECBlocks(30,new ECB(4,122),new ECB(18,123)),new ECBlocks(28,new ECB(13,46),new ECB(32,47)),new ECBlocks(30,new ECB(48,24),new ECB(14,25)),new ECBlocks(30,new ECB(42,15),new ECB(32,16))),new Version(39,new Array(6,26,54,82,110,138,166),new ECBlocks(30,new ECB(20,117),new ECB(4,118)),new ECBlocks(28,new ECB(40,47),new ECB(7,48)),new ECBlocks(30,new ECB(43,24),new ECB(22,25)),new ECBlocks(30,new ECB(10,15),new ECB(67,16))),new Version(40,new Array(6,30,58,86,114,142,170),new ECBlocks(30,new ECB(19,118),new ECB(6,119)),new ECBlocks(28,new ECB(18,47),new ECB(31,48)),new ECBlocks(30,new ECB(34,24),new ECB(34,25)),new ECBlocks(30,new ECB(20,15),new ECB(61,16))))}Version.VERSION_DECODE_INFO=new Array(31892,34236,39577,42195,48118,51042,55367,58893,63784,68472,70749,76311,79154,84390,87683,92361,96236,102084,102881,110507,110734,117786,119615,126325,127568,133589,136944,141498,145311,150283,152622,158308,161089,167017),Version.VERSIONS=buildVersions(),Version.getVersionForNumber=function(e){if(1>e||e>40)throw"ArgumentException";return Version.VERSIONS[e-1]},Version.getProvisionalVersionForDimension=function(e){if(e%4!=1)throw"Error getProvisionalVersionForDimension";try{return Version.getVersionForNumber(e-17>>2)}catch(n){throw"Error getVersionForNumber"}},Version.decodeVersionInformation=function(e){for(var n=4294967295,w=0,C=0;C<Version.VERSION_DECODE_INFO.length;C++){var E=Version.VERSION_DECODE_INFO[C];if(E==e)return this.getVersionForNumber(C+7);var B=FormatInformation.numBitsDiffering(e,E);n>B&&(w=C+7,n=B)}return 3>=n?this.getVersionForNumber(w):null};
//# sourceMappingURL=data:application/json;base64,
